// ============================================
// 📊 TWO TABLES COMMON INPUT
// ============================================
bg_transp = input.int(85, '배경 투명도⇅', minval=0, maxval=100, inline='perf0', group='Performance Table')
text_transp = input.int(45, 'TEXT 투명도⇅', minval=0, maxval=100, inline='perf0', group='Performance Table')

// ============================================
// 📊 PERFORMANCE TABLE
// ============================================
show_performance = input.bool(true, '이익률 표시✔,', inline='perf1', group='Performance Table')
perf_position = input.string('bottom_left', '표시위치🚃', options=['middle_right', 'bottom_left', 'bottom_right', 'bottom_center', 'top_left', 'top_right', 'top_center'], inline='perf1', group='Performance Table')
years_qty = input.int(1, '표시년수⇅', minval=1, inline='perf1', group='Performance Table') - 1

// --- 변수 선언 ---
var color_profit = color.new(color.black, bg_transp)
var float cur_month_pnl = 0.0
var float[] month_pnl = array.new<float>()
var int[] month_time = array.new<int>()
var float[] year_pnl = array.new<float>()
var int[] year_time = array.new<int>()
var int max_array_size = 200

// --- 계산부 ---
float bar_pnl = strategy.equity != strategy.equity[1] and nz(strategy.equity[1]) > 0 ? (strategy.equity / strategy.equity[1] - 1) : 0.0

if show_performance
    bool new_month = month(time) != month(time[1])
    bool new_year = year(time) != year(time[1])

    cur_month_pnl := new_month ? 0.0 : (1 + nz(cur_month_pnl[1])) * (1 + bar_pnl) - 1

    if new_month
        array.push(month_pnl, cur_month_pnl[1])
        array.push(month_time, time[1])
        if array.size(month_pnl) > max_array_size
            array.shift(month_pnl)
            array.shift(month_time)

    if new_year
        float cumulative_pnl = strategy.netprofit[1] / strategy.initial_capital
        array.push(year_pnl, cumulative_pnl)
        array.push(year_time, time[1])
        if array.size(year_pnl) > max_array_size
            array.shift(year_pnl)
            array.shift(year_time)

// --- 테이블 그리기 ---
if show_performance and barstate.islastconfirmedhistory
    float final_cumulative_pnl = strategy.netprofit / strategy.initial_capital
    
    float[] final_year_pnl = array.copy(year_pnl)
    int[] final_year_time = array.copy(year_time)
    array.push(final_year_pnl, final_cumulative_pnl)
    array.push(final_year_time, time)
    
    float[] final_month_pnl = array.copy(month_pnl)
    int[] final_month_time = array.copy(month_time)
    array.push(final_month_pnl, cur_month_pnl)
    array.push(final_month_time, time)

    year_size = array.size(final_year_pnl)
    if year_size > 0
        year_threshold = year(time) - years_qty
        int displayed_rows = 0
        for i = 0 to year_size - 1
            if year(array.get(final_year_time, i)) >= year_threshold
                displayed_rows += 1
        
        if displayed_rows > 0
            table monthly_table = table.new(perf_position, 14, displayed_rows + 1, border_width=1)
            color header_bg_color = color.new(color.gray, bg_transp)
            color text_color = color.new(color.white, text_transp)
            
            table.cell(monthly_table, 0, 0, "년도/월별", text_size=size.auto, bgcolor=header_bg_color, text_color=text_color)
            for i = 1 to 12
                table.cell(monthly_table, i, 0, str.tostring(i, "00") + "월", text_size=size.auto, bgcolor=header_bg_color, text_color=text_color)
            
            // ❗️ 수정: 테이블 헤더를 '누적이익(%)'으로 변경
            table.cell(monthly_table, 13, 0, "누적이익(%)", text_size=size.auto, bgcolor=header_bg_color, text_color=text_color)

            var year_to_row_map = map.new<int, int>()
            int row_idx_counter = 1

            for yi = 0 to year_size - 1
                y_time = array.get(final_year_time, yi)
                y_year = year(y_time)

                if y_year >= year_threshold
                    if not map.contains(year_to_row_map, y_year)
                        map.put(year_to_row_map, y_year, row_idx_counter)
                        row_idx_counter += 1

                    int y_row = map.get(year_to_row_map, y_year)
                    table.cell(monthly_table, 0, y_row, str.tostring(y_year), text_size=size.auto, bgcolor=header_bg_color, text_color=text_color)
                    
                    year_pnl_val = array.get(final_year_pnl, yi)
                    y_color = year_pnl_val > 0 ? color.new(color.rgb(0, 73, 92), bg_transp) : color.new(color.red, bg_transp)
                    table.cell(monthly_table, 13, y_row, str.tostring(year_pnl_val * 100, "#,###"), bgcolor=y_color, text_size=size.auto, text_color=text_color) // (year_pnl_val * 100, "#,###.#'%'") 또는 (year_pnl_val * 100, "0.0'%'")

            month_size = array.size(final_month_pnl)
            for mi = 0 to month_size - 1
                m_time = array.get(final_month_time, mi)
                m_year = year(m_time)
                
                if m_year >= year_threshold and map.contains(year_to_row_map, m_year)
                    int m_row = map.get(year_to_row_map, m_year)
                    int m_col = month(m_time)
                    
                    month_pnl_val = array.get(final_month_pnl, mi)
                    m_color = month_pnl_val > 0 ? color_profit : color.new(color.red, bg_transp)
                    table.cell(monthly_table, m_col, m_row, str.tostring(month_pnl_val * 100, "#,###.#"), bgcolor=m_color, text_size=size.auto, text_color=text_color) // str.tostring(month_pnl_val * 100, "0.0'%'") 또는 str.tostring(month_pnl_val * 100, "#,###.#'%'")


// ============================================
// 📈 ENHANCED STATISTICS TABLE / ✔⏸▶☑💠✅||🚃⇛⇏🚨⇅📈🚀
// ============================================
show_stats = input.bool(true, '성과 검증✔,', inline='perf2', group='Performance Table')
stats_position = input.string('top_right', '성과검증 테이블 표시위치🚃', options=['middle_left', 'middle_right', 'bottom_left', 'bottom_right', 'bottom_center', 'top_left', 'top_right', 'top_center'], inline='perf2', group='Performance Table')
Risk_level = input.int(33, title = '[초당 거래대금] 대비 [투자금액]의 위험 비율(%)', minval = 0, maxval=100, step=1, inline='perf3', group='Performance Table')

daily_dollar_volume = request.security(syminfo.tickerid, "1D", volume[1] * close[1]) //리페인팅을 방지하기 위해 거래대금이 완성된 이전 일봉의 (거래량 * 종가)를 요청하여 정확한 일일 거래대금을 가져옵니다.
daily_avg_dollar_volume = ta.sma(daily_dollar_volume, 48) // 최근 48일봉간 1봉 평균 거래대금을 산출한 다음 86400으로 나누어 초당 거래대금을 계산 함
if show_stats and inDate and barstate.islastconfirmedhistory
    Invest_amount = strategy.equity/1000000
    total_trades = strategy.closedtrades
    winning_trades = strategy.wintrades
    losing_trades = strategy.losstrades
    win_rate = total_trades > 0 ? winning_trades / total_trades * 100 : 0
    profit_factor = strategy.grossloss != 0 ? strategy.grossprofit / math.abs(strategy.grossloss) : 0
    total_return = strategy.initial_capital > 0 ? (strategy.netprofit / strategy.initial_capital) * 100 : 0
    
    Invest_amount_vs_avg_bar_TradeAmount_ratio = daily_avg_dollar_volume > 0 ? (Invest_amount/(daily_avg_dollar_volume/86400)) * 100 : 0 // 내 투자금액을 초당 거래대금 대비 비율을 계산  
    string ratio_formatted = str.tostring(Invest_amount_vs_avg_bar_TradeAmount_ratio, Invest_amount_vs_avg_bar_TradeAmount_ratio >= 1 ? "#,###.##" : "#.###############") + "%"
    string ratio_header = "투자총액/초당 거래대금"
    var table stats_table = table.new(stats_position, 8, 2, border_width=1)
    
    table.cell(stats_table, 0, 0, "총수익률", text_size=size.auto, bgcolor=color.new(color.gray, bg_transp), text_color=color.new(color.white, text_transp))
    table.cell(stats_table, 1, 0, "PF", text_size=size.auto, bgcolor=color.new(color.gray, bg_transp), text_color=color.new(color.white, text_transp))
    table.cell(stats_table, 2, 0, "총거래", text_size=size.auto, bgcolor=color.new(color.gray, bg_transp), text_color=color.new(color.white, text_transp))
    table.cell(stats_table, 3, 0, "승률", text_size=size.auto, bgcolor=color.new(color.gray, bg_transp), text_color=color.new(color.white, text_transp))
    table.cell(stats_table, 4, 0, "Avg Win", text_size=size.auto, bgcolor=color.new(color.gray, bg_transp), text_color=color.new(color.white, text_transp))
    table.cell(stats_table, 5, 0, "Avg Loss", text_size=size.auto, bgcolor=color.new(color.gray, bg_transp), text_color=color.new(color.white, text_transp))
    table.cell(stats_table, 6, 0, "Max DD", text_size=size.auto, bgcolor=color.new(color.gray, bg_transp), text_color=color.new(color.white, text_transp))
    table.cell(stats_table, 7, 0, ratio_header, text_size=size.auto, bgcolor=color.new(color.gray, bg_transp), text_color=color.new(color.white, text_transp), tooltip="(투입 자산총액/이전 48봉 평균 거래대금) * 100%")

    table.cell(stats_table, 0, 1, str.tostring(total_return, total_return >= 1000 ? "#,###" : "#") + "%", text_size=size.auto, bgcolor=total_return > 0 ? color.new(color.rgb(0, 73, 92), bg_transp) : color.new(color.red, bg_transp), text_color=color.new(color.white, text_transp))
    table.cell(stats_table, 1, 1, str.tostring(profit_factor, "#.##"), text_size=size.auto, bgcolor=profit_factor > 1 ? color.new(color.rgb(0, 73, 92), bg_transp) : color.new(color.red, bg_transp), text_color=color.new(color.white, text_transp))
    table.cell(stats_table, 2, 1, str.tostring(total_trades), text_size=size.auto, bgcolor=color.new(color.gray, 90), text_color=color.new(color.white, text_transp))
    table.cell(stats_table, 3, 1, str.tostring(win_rate, "#.#") + "%", text_size=size.auto, bgcolor=win_rate > 50 ? color.new(color.rgb(0, 73, 92), bg_transp) : color.new(color.red, bg_transp), text_color=color.new(color.white, text_transp))
    table.cell(stats_table, 4, 1, str.tostring(strategy.avg_winning_trade_percent, "#.#") + "%", text_size=size.auto, bgcolor=color.new(color.rgb(0, 73, 92), bg_transp), text_color=color.new(color.white, text_transp))
    table.cell(stats_table, 5, 1, str.tostring(strategy.avg_losing_trade_percent, "#.#") + "%", text_size=size.auto, bgcolor=color.new(color.red, bg_transp), text_color=color.new(color.white, text_transp))
    table.cell(stats_table, 6, 1, str.tostring(strategy.max_drawdown_percent, "#.#") + "%", text_size=size.auto, bgcolor=color.new(color.red, bg_transp), text_color=color.new(color.white, text_transp))
    table.cell(stats_table, 7, 1, ratio_formatted, text_size=size.auto, bgcolor=Invest_amount_vs_avg_bar_TradeAmount_ratio < Risk_level ? color.new(color.green, 60) : color.new(color.purple, 60), text_color=color.new(color.white, text_transp))